"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

/**
 * Flux Component
 *
 * Component interface to reactComponentMethods module.
 *
 * Children of FluxComponent are given access to the flux instance via
 * `context.flux`. Use this near the top of your app hierarchy and all children
 * will have easy access to the flux instance (including, of course, other
 * Flux components!):
 *
 * <FluxComponent flux={flux}>
 *    ...the rest of your app
 * </FluxComponent>
 *
 * Now any child can access the flux instance again like this:
 *
 * <FluxComponent>
 *    ...children
 * </FluxComponent>
 *
 * We don't need the flux prop this time because flux is already part of
 * the context.
 *
 * Additionally, immediate children are given a `flux` prop.
 *
 * The component has an optional prop `connectToStores`, which is passed to
 * `this.connectToStores` and used to set the initial state. The component's
 * state is injected as props to the child components.
 *
 * The practical upshot of all this is that fluxMixin, state changes, and
 * context are now simply implementation details. Among other things, this means
 * you can write your components as plain ES6 classes. Here's an example:
 *
 * class ParentComponent extends React.Component {
 *
 *   render() {
 *     <FluxComponent connectToStores="fooStore">
 *       <ChildComponent />
 *     </FluxComponent>
 *   }
 *
 * }
 *
 * ChildComponent in this example has prop `flux` containing the flux instance,
 * and props that sync with each of the state keys of fooStore.
 */

var React = _interopRequire(require("react/addons"));

var _reactComponentMethods = require("./reactComponentMethods");

var instanceMethods = _reactComponentMethods.instanceMethods;
var staticProperties = _reactComponentMethods.staticProperties;

var assign = _interopRequire(require("object-assign"));

var FluxComponent = (function (_React$Component) {
  function FluxComponent(props, context) {
    _classCallCheck(this, FluxComponent);

    _get(Object.getPrototypeOf(FluxComponent.prototype), "constructor", this).call(this, props, context);

    this.initialize();

    this.state = this.connectToStores(props.connectToStores, props.stateGetter);

    this.wrapChild = this.wrapChild.bind(this);
  }

  _inherits(FluxComponent, _React$Component);

  _createClass(FluxComponent, {
    wrapChild: {
      value: function wrapChild(child) {
        return React.addons.cloneWithProps(child, this.getChildProps());
      }
    },
    getChildProps: {
      value: function getChildProps() {
        var _props = this.props;
        var children = _props.children;
        var render = _props.render;
        var connectToStores = _props.connectToStores;
        var stateGetter = _props.stateGetter;
        var flux = _props.flux;

        var extraProps = _objectWithoutProperties(_props, ["children", "render", "connectToStores", "stateGetter", "flux"]);

        return assign({ flux: this.getFlux() }, // TODO: remove in next major version
        this.state, extraProps);
      }
    },
    render: {
      value: function render() {
        var _props = this.props;
        var children = _props.children;
        var render = _props.render;

        if (typeof render === "function") {
          return render(this.getChildProps(), this.getFlux());
        }

        if (!children) {
          return null;
        }if (!Array.isArray(children)) {
          var child = children;
          return this.wrapChild(child);
        } else {
          return React.createElement(
            "span",
            null,
            React.Children.map(children, this.wrapChild)
          );
        }
      }
    }
  });

  return FluxComponent;
})(React.Component);

assign(FluxComponent.prototype, instanceMethods);

assign(FluxComponent, staticProperties);

module.exports = FluxComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGRvbnMvRmx1eENvbXBvbmVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBK0NPLEtBQUssMkJBQU0sY0FBYzs7cUNBQ2tCLHlCQUF5Qjs7SUFBbEUsZUFBZSwwQkFBZixlQUFlO0lBQUUsZ0JBQWdCLDBCQUFoQixnQkFBZ0I7O0lBQ25DLE1BQU0sMkJBQU0sZUFBZTs7SUFFNUIsYUFBYTtBQUNOLFdBRFAsYUFBYSxDQUNMLEtBQUssRUFBRSxPQUFPLEVBQUU7MEJBRHhCLGFBQWE7O0FBRWYsK0JBRkUsYUFBYSw2Q0FFVCxLQUFLLEVBQUUsT0FBTyxFQUFFOztBQUV0QixRQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7O0FBRWxCLFFBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQzs7QUFFNUUsUUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUM1Qzs7WUFURyxhQUFhOztlQUFiLGFBQWE7QUFXakIsYUFBUzthQUFBLG1CQUFDLEtBQUssRUFBRTtBQUNmLGVBQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQ2hDLEtBQUssRUFDTCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQ3JCLENBQUM7T0FDSDs7QUFFRCxpQkFBYTthQUFBLHlCQUFHO3FCQU9NLElBQUksQ0FBQyxLQUFLO1lBTDVCLFFBQVEsVUFBUixRQUFRO1lBQ1IsTUFBTSxVQUFOLE1BQU07WUFDTixlQUFlLFVBQWYsZUFBZTtZQUNmLFdBQVcsVUFBWCxXQUFXO1lBQ1gsSUFBSSxVQUFKLElBQUk7O1lBQ0QsVUFBVTs7QUFFZixlQUFPLE1BQU0sQ0FDWCxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7QUFDeEIsWUFBSSxDQUFDLEtBQUssRUFDVixVQUFVLENBQ1gsQ0FBQztPQUNIOztBQUVELFVBQU07YUFBQSxrQkFBRztxQkFDc0IsSUFBSSxDQUFDLEtBQUs7WUFBL0IsUUFBUSxVQUFSLFFBQVE7WUFBRSxNQUFNLFVBQU4sTUFBTTs7QUFFeEIsWUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7QUFDaEMsaUJBQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUNyRDs7QUFFRCxZQUFJLENBQUMsUUFBUTtBQUFFLGlCQUFPLElBQUksQ0FBQztTQUFBLEFBRTNCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQzVCLGNBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQztBQUN2QixpQkFBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzlCLE1BQU07QUFDTCxpQkFBTzs7O1lBQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7V0FBUSxDQUFDO1NBQ3BFO09BQ0Y7Ozs7U0FqREcsYUFBYTtHQUFTLEtBQUssQ0FBQyxTQUFTOztBQW9EM0MsTUFBTSxDQUNKLGFBQWEsQ0FBQyxTQUFTLEVBQ3ZCLGVBQWUsQ0FDaEIsQ0FBQzs7QUFFRixNQUFNLENBQUMsYUFBYSxFQUFFLGdCQUFnQixDQUFDLENBQUM7O2lCQUV6QixhQUFhIiwiZmlsZSI6InNyYy9hZGRvbnMvRmx1eENvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRmx1eCBDb21wb25lbnRcbiAqXG4gKiBDb21wb25lbnQgaW50ZXJmYWNlIHRvIHJlYWN0Q29tcG9uZW50TWV0aG9kcyBtb2R1bGUuXG4gKlxuICogQ2hpbGRyZW4gb2YgRmx1eENvbXBvbmVudCBhcmUgZ2l2ZW4gYWNjZXNzIHRvIHRoZSBmbHV4IGluc3RhbmNlIHZpYVxuICogYGNvbnRleHQuZmx1eGAuIFVzZSB0aGlzIG5lYXIgdGhlIHRvcCBvZiB5b3VyIGFwcCBoaWVyYXJjaHkgYW5kIGFsbCBjaGlsZHJlblxuICogd2lsbCBoYXZlIGVhc3kgYWNjZXNzIHRvIHRoZSBmbHV4IGluc3RhbmNlIChpbmNsdWRpbmcsIG9mIGNvdXJzZSwgb3RoZXJcbiAqIEZsdXggY29tcG9uZW50cyEpOlxuICpcbiAqIDxGbHV4Q29tcG9uZW50IGZsdXg9e2ZsdXh9PlxuICogICAgLi4udGhlIHJlc3Qgb2YgeW91ciBhcHBcbiAqIDwvRmx1eENvbXBvbmVudD5cbiAqXG4gKiBOb3cgYW55IGNoaWxkIGNhbiBhY2Nlc3MgdGhlIGZsdXggaW5zdGFuY2UgYWdhaW4gbGlrZSB0aGlzOlxuICpcbiAqIDxGbHV4Q29tcG9uZW50PlxuICogICAgLi4uY2hpbGRyZW5cbiAqIDwvRmx1eENvbXBvbmVudD5cbiAqXG4gKiBXZSBkb24ndCBuZWVkIHRoZSBmbHV4IHByb3AgdGhpcyB0aW1lIGJlY2F1c2UgZmx1eCBpcyBhbHJlYWR5IHBhcnQgb2ZcbiAqIHRoZSBjb250ZXh0LlxuICpcbiAqIEFkZGl0aW9uYWxseSwgaW1tZWRpYXRlIGNoaWxkcmVuIGFyZSBnaXZlbiBhIGBmbHV4YCBwcm9wLlxuICpcbiAqIFRoZSBjb21wb25lbnQgaGFzIGFuIG9wdGlvbmFsIHByb3AgYGNvbm5lY3RUb1N0b3Jlc2AsIHdoaWNoIGlzIHBhc3NlZCB0b1xuICogYHRoaXMuY29ubmVjdFRvU3RvcmVzYCBhbmQgdXNlZCB0byBzZXQgdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBjb21wb25lbnQnc1xuICogc3RhdGUgaXMgaW5qZWN0ZWQgYXMgcHJvcHMgdG8gdGhlIGNoaWxkIGNvbXBvbmVudHMuXG4gKlxuICogVGhlIHByYWN0aWNhbCB1cHNob3Qgb2YgYWxsIHRoaXMgaXMgdGhhdCBmbHV4TWl4aW4sIHN0YXRlIGNoYW5nZXMsIGFuZFxuICogY29udGV4dCBhcmUgbm93IHNpbXBseSBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzLiBBbW9uZyBvdGhlciB0aGluZ3MsIHRoaXMgbWVhbnNcbiAqIHlvdSBjYW4gd3JpdGUgeW91ciBjb21wb25lbnRzIGFzIHBsYWluIEVTNiBjbGFzc2VzLiBIZXJlJ3MgYW4gZXhhbXBsZTpcbiAqXG4gKiBjbGFzcyBQYXJlbnRDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICpcbiAqICAgcmVuZGVyKCkge1xuICogICAgIDxGbHV4Q29tcG9uZW50IGNvbm5lY3RUb1N0b3Jlcz1cImZvb1N0b3JlXCI+XG4gKiAgICAgICA8Q2hpbGRDb21wb25lbnQgLz5cbiAqICAgICA8L0ZsdXhDb21wb25lbnQ+XG4gKiAgIH1cbiAqXG4gKiB9XG4gKlxuICogQ2hpbGRDb21wb25lbnQgaW4gdGhpcyBleGFtcGxlIGhhcyBwcm9wIGBmbHV4YCBjb250YWluaW5nIHRoZSBmbHV4IGluc3RhbmNlLFxuICogYW5kIHByb3BzIHRoYXQgc3luYyB3aXRoIGVhY2ggb2YgdGhlIHN0YXRlIGtleXMgb2YgZm9vU3RvcmUuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0L2FkZG9ucyc7XG5pbXBvcnQgeyBpbnN0YW5jZU1ldGhvZHMsIHN0YXRpY1Byb3BlcnRpZXMgfSBmcm9tICcuL3JlYWN0Q29tcG9uZW50TWV0aG9kcyc7XG5pbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xuXG5jbGFzcyBGbHV4Q29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMsIGNvbnRleHQpIHtcbiAgICBzdXBlcihwcm9wcywgY29udGV4dCk7XG5cbiAgICB0aGlzLmluaXRpYWxpemUoKTtcblxuICAgIHRoaXMuc3RhdGUgPSB0aGlzLmNvbm5lY3RUb1N0b3Jlcyhwcm9wcy5jb25uZWN0VG9TdG9yZXMsIHByb3BzLnN0YXRlR2V0dGVyKTtcblxuICAgIHRoaXMud3JhcENoaWxkID0gdGhpcy53cmFwQ2hpbGQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHdyYXBDaGlsZChjaGlsZCkge1xuICAgIHJldHVybiBSZWFjdC5hZGRvbnMuY2xvbmVXaXRoUHJvcHMoXG4gICAgICBjaGlsZCxcbiAgICAgIHRoaXMuZ2V0Q2hpbGRQcm9wcygpXG4gICAgKTtcbiAgfVxuXG4gIGdldENoaWxkUHJvcHMoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICByZW5kZXIsXG4gICAgICBjb25uZWN0VG9TdG9yZXMsXG4gICAgICBzdGF0ZUdldHRlcixcbiAgICAgIGZsdXgsXG4gICAgICAuLi5leHRyYVByb3BzIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIGFzc2lnbihcbiAgICAgIHsgZmx1eDogdGhpcy5nZXRGbHV4KCkgfSwgLy8gVE9ETzogcmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvblxuICAgICAgdGhpcy5zdGF0ZSxcbiAgICAgIGV4dHJhUHJvcHNcbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIHJlbmRlciB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICh0eXBlb2YgcmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gcmVuZGVyKHRoaXMuZ2V0Q2hpbGRQcm9wcygpLCB0aGlzLmdldEZsdXgoKSk7XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZHJlbikgcmV0dXJuIG51bGw7XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuO1xuICAgICAgcmV0dXJuIHRoaXMud3JhcENoaWxkKGNoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDxzcGFuPntSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIHRoaXMud3JhcENoaWxkKX08L3NwYW4+O1xuICAgIH1cbiAgfVxufVxuXG5hc3NpZ24oXG4gIEZsdXhDb21wb25lbnQucHJvdG90eXBlLFxuICBpbnN0YW5jZU1ldGhvZHNcbik7XG5cbmFzc2lnbihGbHV4Q29tcG9uZW50LCBzdGF0aWNQcm9wZXJ0aWVzKTtcblxuZXhwb3J0IGRlZmF1bHQgRmx1eENvbXBvbmVudDtcbiJdfQ==