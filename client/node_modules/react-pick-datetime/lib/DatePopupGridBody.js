"use strict";

var React = require("react/addons");

var PureRenderMixin = React.addons.PureRenderMixin;

var moment = require("moment");
var joinClasses = require("react/lib/joinClasses");

function getWeeks(month, value) {
  var today = moment();
  var endDay = moment(month).endOf("month").endOf("week");
  var currentDay = moment(month).startOf("month").startOf("week");
  var currentWeek;
  var weeks = [];

  while (!currentDay.isAfter(endDay)) {
    if (currentDay.day() === 0) {
      currentWeek = [];
      weeks.push(currentWeek);
    }

    currentWeek.push({
      isOtherMonth: currentDay.month() !== month.month(),
      isValue: value && currentDay.isSame(value, "day"),
      isToday: currentDay.isSame(today, "day"),
      value: moment(currentDay),
      formatted: currentDay.format("D")
    });

    currentDay.add(1, "days");
  }

  return weeks;
}

var DatePopupGridBody = React.createClass({
  displayName: "DatePopupGridBody",

  mixins: [PureRenderMixin],

  propTypes: {
    getDescendantIdForDay: React.PropTypes.func.isRequired,
    month: React.PropTypes.object.isRequired,
    onComplete: React.PropTypes.func.isRequired,
    value: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      value: null
    };
  },

  handleDayClick: function handleDayClick(day) {
    this.props.onComplete(day);
  },

  render: function render() {
    var _this = this;

    var weeks = getWeeks(this.props.month, this.props.value);

    return React.createElement(
      "tbody",
      null,
      weeks.map(function (week, idx) {
        return React.createElement(
          "tr",
          { key: idx },
          week.map(function (day, idx) {
            return React.createElement(
              "td",
              {
                "aria-selected": day.isSelected + "",
                className: joinClasses("DatePopupGridBody-day", day.isToday && "DatePopupGridBody-day--isToday", day.isOtherMonth && "DatePopupGridBody-day--isOtherMonth", day.isValue && "DatePopupGridBody-day--isValue"),
                id: _this.props.getDescendantIdForDay(day.value),
                key: idx,
                onClick: _this.handleDayClick.bind(_this, day.value),
                role: "gridcell" },
              day.formatted
            );
          })
        );
      })
    );
  }

});

module.exports = DatePopupGridBody;