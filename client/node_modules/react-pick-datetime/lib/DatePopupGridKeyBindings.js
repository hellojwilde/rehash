"use strict";

var _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };

var React = require("react/addons");

var PureRenderMixin = React.addons.PureRenderMixin;

var cloneWithProps = require("react/lib/cloneWithProps");
var moment = require("moment");

var KEY_ARROW_DOWN = 40;
var KEY_ARROW_UP = 38;
var KEY_ARROW_LEFT = 37;
var KEY_ARROW_RIGHT = 39;
var KEY_RETURN = 13;
var KEY_ESC = 27;

var DatePopupGridKeyBindings = React.createClass({
  displayName: "DatePopupGridKeyBindings",

  mixins: [PureRenderMixin],

  propTypes: {
    value: React.PropTypes.object,
    onChange: React.PropTypes.func.isRequired,
    onComplete: React.PropTypes.func.isRequired,
    onCancel: React.PropTypes.func.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      value: null
    };
  },

  getKeyBindings: function getKeyBindings() {
    var _props = this.props;
    var onChange = _props.onChange;
    var onComplete = _props.onComplete;
    var onCancel = _props.onCancel;
    var value = _props.value;

    return (function () {
      var _ref = {};

      _defineProperty(_ref, KEY_ARROW_LEFT, function () {
        return value && onChange(moment(value).subtract(1, "d"));
      });

      _defineProperty(_ref, KEY_ARROW_RIGHT, function () {
        return value && onChange(moment(value).add(1, "d"));
      });

      _defineProperty(_ref, KEY_ARROW_UP, function () {
        return value && onChange(moment(value).subtract(1, "w"));
      });

      _defineProperty(_ref, KEY_ARROW_DOWN, function () {
        return value && onChange(moment(value).add(1, "w"));
      });

      _defineProperty(_ref, KEY_RETURN, function () {
        return value && onComplete(value);
      });

      _defineProperty(_ref, KEY_ESC, function () {
        return onCancel();
      });

      return _ref;
    })();
  },

  handleKeyDown: function handleKeyDown(event) {
    var binding = this.getKeyBindings()[event.keyCode];
    if (binding) {
      event.preventDefault();
      binding();
    }
  },

  render: function render() {
    return cloneWithProps(React.Children.only(this.props.children), {
      onKeyDown: this.handleKeyDown
    });
  }

});

module.exports = DatePopupGridKeyBindings;