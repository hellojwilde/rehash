"use strict";

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var DatePopupGridBody = require("./DatePopupGridBody");
var DatePopupGridHeader = require("./DatePopupGridHeader");
var DatePopupGridKeyBindings = require("./DatePopupGridKeyBindings");;
var React = require("react/addons");

var PureRenderMixin = React.addons.PureRenderMixin;

var getUniqueId = require("react-pick/lib/helpers/getUniqueId");
var moment = require("moment");

var DatePopupGrid = React.createClass({
  displayName: "DatePopupGrid",

  mixins: [PureRenderMixin],

  propTypes: {
    month: React.PropTypes.object.isRequired,
    onChange: React.PropTypes.func.isRequired,
    onComplete: React.PropTypes.func.isRequired,
    onCancel: React.PropTypes.func.isRequired,
    value: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      value: null
    };
  },

  getInitialState: function getInitialState() {
    return {
      id: getUniqueId("DatePopupGrid")
    };
  },

  getDescendantIdForDay: function getDescendantIdForDay(day) {
    return day && "" + this.state.id + "-" + day.format("DDD");
  },

  render: function render() {
    var _props = this.props;
    var month = _props.month;
    var value = _props.value;
    var onComplete = _props.onComplete;
    var onChange = _props.onChange;
    var onCancel = _props.onCancel;

    var otherProps = _objectWithoutProperties(_props, ["month", "value", "onComplete", "onChange", "onCancel"]);

    return React.createElement(
      DatePopupGridKeyBindings,
      { value: value, onChange: onChange, onComplete: onComplete, onCancel: onCancel },
      React.createElement(
        "table",
        _extends({}, otherProps, {
          className: "DatePopupGrid",
          "aria-activedescendant": this.getDescendantIdForDay(this.props.value),
          role: "grid" }),
        React.createElement(DatePopupGridHeader, { month: this.props.month }),
        React.createElement(DatePopupGridBody, _extends({ month: month, value: value, onComplete: onComplete }, {
          getDescendantIdForDay: this.getDescendantIdForDay
        }))
      )
    );
  }

});

module.exports = DatePopupGrid;